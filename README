# Math Service

Math Service is a full-stack application for performing mathematical operations (fibonacci, factorial, power) with user authentication, logging, and caching. The backend is built with FastAPI, SQLAlchemy, and Redis, and supports both API and server-rendered HTML frontends.

## Project Structure

- `app/` – FastAPI backend
  - `main.py` – API entry point
  - `controllers/` – API route handlers
  - `auth/` – authentication and JWT logic
  - `db/` – database models and access
  - `middleware/` – error logging
  - `schemas/` – request/response validation
  - `services/` – math business logic
  - `utils/` – config, cache, logger
  - `views/` – Jinja2 HTML templates (frontend)
- `log_worker/` – background worker for log persistence
- `tests/` – integration and unit tests
- `requirements.txt` – Python dependencies
- `Dockerfile`, `log_worker.Dockerfile` – Docker images
- `docker-compose.yml` – service orchestration
- `.env` – environment variables

## Features

- Math operations: fibonacci, factorial, power
- JWT authentication: user registration and login
- Centralized logging: logs sent to Redis and persisted by worker
- Redis cache: results are cached for performance
- Prometheus metrics: API monitoring
- Frontend: Jinja2 HTML templates

## Quick Start

1. **Configure environment:**
   - Copy `dist.env` to `.env` and set your variables (DB, SECRET_KEY, etc.)

2. **Build and run with Docker Compose:**
   ```bash
   docker-compose up --build
   ```

3. **Access the API:**
   - Swagger UI: http://localhost:8000/docs
   - Built-in frontend: http://localhost:8000/auth, /math, /logs

## Main Endpoints

- `POST /auth/register` – user registration
- `POST /auth/login` – login and get JWT token
- `POST /fibonacci` – calculate fibonacci (auth required)
- `POST /factorial` – calculate factorial (auth required)
- `POST /power` – calculate power (auth required)

## Frontend Options

- **Jinja2 templates:** Server-rendered HTML in `app/views/` (e.g., `auth.html`, `math.html`, `logs.html`).

## Logging and Worker

- API operations send logs to the Redis `logs` channel.
- The `log_worker` service listens and saves logs to the database.

## Testing

- Tests are in the `tests/` directory.
- Integration tests use a separate SQLite DB and mock Redis, so they do not affect production data or require Redis to be running.
- Run all tests with:
  ```bash
  pytest
  ```

## Local Development

- Run the API and worker separately:
  ```bash
  uvicorn app.main:app --reload
  python log_worker/worker.py
  ```
- Use Postman or the built-in frontend for manual testing.
